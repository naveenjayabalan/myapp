/** 
 * NgxTreeSelect Copyright 2018
 * Licensed under MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"), require("@angular/forms"), require("@angular/common"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core", "@angular/forms", "@angular/common"], factory);
	else if(typeof exports === 'object')
		exports["ngxTreeSelect"] = factory(require("@angular/core"), require("@angular/forms"), require("@angular/common"));
	else
		root["ngxTreeSelect"] = factory(root["@angular/core"], root["@angular/forms"], root["@angular/common"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_14__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 17);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExpandMode; });
var ExpandMode = /** @class */ (function () {
    function ExpandMode() {
    }
    ExpandMode.None = 'None';
    ExpandMode.Selection = 'Selection';
    ExpandMode.All = 'All';
    return ExpandMode;
}());

function ExpandMode_tsickle_Closure_declarations() {
    /** @type {?} */
    ExpandMode.None;
    /** @type {?} */
    ExpandMode.Selection;
    /** @type {?} */
    ExpandMode.All;
}
//# sourceMappingURL=expand-mode.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TreeSelectDefaultOptions; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__expand_mode__ = __webpack_require__(1);


var TreeSelectDefaultOptions = /** @class */ (function () {
    function TreeSelectDefaultOptions() {
        this.expandMode = __WEBPACK_IMPORTED_MODULE_1__expand_mode__["a" /* ExpandMode */].None;
    }
    TreeSelectDefaultOptions.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] },
    ];
    /**
     * @nocollapse
     */
    TreeSelectDefaultOptions.ctorParameters = function () { return []; };
    return TreeSelectDefaultOptions;
}());

function TreeSelectDefaultOptions_tsickle_Closure_declarations() {
    /** @type {?} */
    TreeSelectDefaultOptions.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    TreeSelectDefaultOptions.ctorParameters;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.allowFilter;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.filterPlaceholder;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.maxVisibleItemCount;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.allowParentSelection;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.idField;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.textField;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.childrenField;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.filterCaseSensitive;
    /** @type {?} */
    TreeSelectDefaultOptions.prototype.expandMode;
}
//# sourceMappingURL=tree-select-default-options.js.map

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TreeSelectComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_forms__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_select_service__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__models_tree_select_default_options__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__ = __webpack_require__(1);





// tslint:disable-next-line:no-empty
var /** @type {?} */ noop = function () { };
var /** @type {?} */ CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: __WEBPACK_IMPORTED_MODULE_1__angular_forms__["NG_VALUE_ACCESSOR"],
    // tslint:disable-next-line:no-forward-ref
    useExisting: Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["forwardRef"])(function () { return TreeSelectComponent; }),
    multi: true
};
var TreeSelectComponent = /** @class */ (function () {
    /**
     * @param {?} svc
     * @param {?} defaultOpts
     */
    function TreeSelectComponent(svc, defaultOpts) {
        var _this = this;
        this.svc = svc;
        this.defaultOpts = defaultOpts;
        this.onTouchedCallback = noop;
        this.showMoreLink = false;
        this.moreLoaded = false;
        this.disabled = false;
        this.placeholder = '';
        this.filterPlaceholder = 'Type here for filtering items...';
        this.allowFilter = true;
        this._isOpen = false;
        this.onChangeCallback = noop;
        this.haveFocus = false;
        this.inputFocus = false;
        this.clickedOutside = this.clickedOutside.bind(this);
        this.svc.modelChanged$.subscribe(function (result) {
            _this.onChangeCallback(result);
        });
        this.maxVisibleItemCount = (defaultOpts.maxVisibleItemCount || 0);
        this.allowParentSelection = ((defaultOpts.allowParentSelection === undefined ||
            defaultOpts.allowParentSelection === null) ?
            true :
            defaultOpts.allowParentSelection);
        this.allowFilter = ((defaultOpts.allowFilter === undefined || defaultOpts.allowFilter === null) ?
            true :
            defaultOpts.allowFilter);
        this.filterCaseSensitive = ((defaultOpts.filterCaseSensitive === undefined || defaultOpts.filterCaseSensitive === null) ?
            false :
            defaultOpts.filterCaseSensitive);
        this.filterPlaceholder = (defaultOpts.filterPlaceholder || 'Type here for filtering items...');
        this.idField = (defaultOpts.idField || 'id');
        this.textField = (defaultOpts.textField || 'id');
        this.childrenField = (defaultOpts.childrenField || '');
        this.expandMode = (defaultOpts.expandMode || __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__["a" /* ExpandMode */].None);
    }
    Object.defineProperty(TreeSelectComponent.prototype, "items", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setItems(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "idField", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.idProperty = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "textField", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.textProperty = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "allowParentSelection", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.allowParentSelection;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.allowParentSelection = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "childrenField", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.childProperty = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "multiple", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.allowMultiple;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.allowMultiple = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "filterCaseSensitive", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.filterCaseSensitive;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.filterCaseSensitive = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "expandMode", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.expandMode;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.expandMode = value; }, true);
            this.svc.setExpand();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "maxVisibleItemCount", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.maxVisibleItemCount;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.maxVisibleItemCount = value; }, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "internalItems", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.getInternalItems() || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "selection", {
        /**
         * @return {?}
         */
        get: function () {
            this.showMoreLink = (this.maxVisibleItemCount > 0 &&
                ((this.svc.getInternalSelection().length - this.maxVisibleItemCount) > 0));
            return this.svc.getInternalSelection();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectComponent.prototype, "filter", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.filter;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this.svc.setConfiguration(function (opt) { return opt.filter = value; }, false);
            for (var _i = 0, _a = this.internalItems; _i < _a.length; _i++) {
                var item = _a[_i];
                this.ProcessMatchFilterTreeItem(item, this.svc.Configuration.filter);
            }
            this.svc.setExpand();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeSelectComponent.prototype.keyUp = function ($event) { };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeSelectComponent.prototype.toggle = function ($event) {
        $event.preventDefault();
        this.haveFocus = true;
        this.svc.toggleOpen();
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    TreeSelectComponent.prototype.removeItem = function ($event, item) {
        $event.stopPropagation();
        this.svc.toggleItemSelection(item);
    };
    Object.defineProperty(TreeSelectComponent.prototype, "isOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeSelectComponent.prototype.clickedOutside = function () {
        if (!this.inputFocus) {
            if (!this.haveFocus && this.isOpen || this.haveFocus && !this.isOpen) {
                this.onTouched();
            }
            this.haveFocus = false;
        }
    };
    /**
     * @return {?}
     */
    TreeSelectComponent.prototype.onTouched = function () {
        this.svc.close();
        this.onTouchedCallback();
    };
    /**
     * @return {?}
     */
    TreeSelectComponent.prototype.setInputFocus = function () {
        this.inputFocus = true;
    };
    /**
     * @return {?}
     */
    TreeSelectComponent.prototype.setInputFocusOut = function () {
        this.inputFocus = false;
    };
    /**
     * Write a new value to the element.
     *
     * \@memberof TreeSelectComponent
     * @param {?} value
     * @return {?}
     */
    TreeSelectComponent.prototype.writeValue = function (value) {
        this.svc.setSelection(value);
    };
    /**
     * Set the function to be called when the control receives a change event.
     *
     * \@memberof TreeSelectComponent
     * @param {?} fn
     * @return {?}
     */
    TreeSelectComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * Set the function to be called when the control receives a touch event.
     *
     * \@memberof TreeSelectComponent
     * @param {?} fn
     * @return {?}
     */
    TreeSelectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     *
     * \@memberof TreeSelectComponent
     * @param {?} isDisabled
     * @return {?}
     */
    TreeSelectComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * This finction is called when user click on show more link.
     *
     * \@memberof TreeSelectComponent
     * @param {?} $event
     * @return {?}
     */
    TreeSelectComponent.prototype.loadMore = function ($event) {
        $event.stopPropagation();
        this.moreLoaded = !this.moreLoaded;
    };
    /**
     * @param {?} tree
     * @param {?} filter
     * @return {?}
     */
    TreeSelectComponent.prototype.ProcessMatchFilterTreeItem = function (tree, filter) {
        var /** @type {?} */ result = false;
        if (tree && tree.children && tree.children.length > 0) {
            for (var _i = 0, _a = tree.children; _i < _a.length; _i++) {
                var child = _a[_i];
                result = this.ProcessMatchFilterTreeItem(child, filter) || result;
            }
        }
        tree.matchFilter = this.filterCaseSensitive ?
            (tree.id.indexOf(filter) > -1 ||
                tree.text.indexOf(filter) > -1 ||
                result) :
            (tree.id.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
                tree.text.toLowerCase().indexOf(filter.toLowerCase()) > -1 ||
                result);
        return tree.matchFilter;
    };
    TreeSelectComponent.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"], args: [{
                    selector: 'tree-select',
                    templateUrl: './tree-select.component.html',
                    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, __WEBPACK_IMPORTED_MODULE_2__services_select_service__["a" /* SelectService */]],
                    styleUrls: ['./tree-select.component.scss']
                },] },
    ];
    /**
     * @nocollapse
     */
    TreeSelectComponent.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_2__services_select_service__["a" /* SelectService */], },
        { type: __WEBPACK_IMPORTED_MODULE_3__models_tree_select_default_options__["a" /* TreeSelectDefaultOptions */], },
    ]; };
    TreeSelectComponent.propDecorators = {
        'disabled': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'placeholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'filterPlaceholder': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'allowFilter': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'items': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'idField': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'textField': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'allowParentSelection': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'childrenField': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'multiple': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'filterCaseSensitive': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'expandMode': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'maxVisibleItemCount': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return TreeSelectComponent;
}());

function TreeSelectComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    TreeSelectComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    TreeSelectComponent.ctorParameters;
    /** @type {?} */
    TreeSelectComponent.propDecorators;
    /** @type {?} */
    TreeSelectComponent.prototype.onTouchedCallback;
    /** @type {?} */
    TreeSelectComponent.prototype.showMoreLink;
    /** @type {?} */
    TreeSelectComponent.prototype.moreLoaded;
    /** @type {?} */
    TreeSelectComponent.prototype.disabled;
    /** @type {?} */
    TreeSelectComponent.prototype.placeholder;
    /** @type {?} */
    TreeSelectComponent.prototype.filterPlaceholder;
    /** @type {?} */
    TreeSelectComponent.prototype.allowFilter;
    /** @type {?} */
    TreeSelectComponent.prototype._isOpen;
    /** @type {?} */
    TreeSelectComponent.prototype.onChangeCallback;
    /** @type {?} */
    TreeSelectComponent.prototype.haveFocus;
    /** @type {?} */
    TreeSelectComponent.prototype.inputFocus;
    /** @type {?} */
    TreeSelectComponent.prototype.svc;
    /** @type {?} */
    TreeSelectComponent.prototype.defaultOpts;
}
//# sourceMappingURL=tree-select.component.js.map

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SelectService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_selectable_item__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__models_select_option__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__ = __webpack_require__(1);





var SelectService = /** @class */ (function () {
    function SelectService() {
        this.modelChanged$ = new __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__["Subject"]();
        this._options = new __WEBPACK_IMPORTED_MODULE_2__models_select_option__["a" /* SelectOption */]();
    }
    /**
     * @return {?}
     */
    SelectService.prototype.close = function () {
        if (this.Configuration.isOpen) {
            this.setConfiguration(function (opt) { return opt.isOpen = false; }, false);
        }
    };
    /**
     * @return {?}
     */
    SelectService.prototype.open = function () {
        if (!this.Configuration.isOpen) {
            this.setConfiguration(function (opt) { return opt.isOpen = true; }, false);
        }
    };
    /**
     * @return {?}
     */
    SelectService.prototype.toggleOpen = function () {
        this.setConfiguration(function (opt) { return opt.isOpen = !opt.isOpen; }, false);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SelectService.prototype.setItems = function (value) {
        this.setConfiguration(function (opt) { return opt.items = value; }, true);
        this.setExpand();
    };
    /**
     * @return {?}
     */
    SelectService.prototype.getInternalItems = function () {
        return this._items;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    SelectService.prototype.setSelection = function (values) {
        this.setConfiguration(function (opt) { return opt.model = values; }, true);
        this.setExpand();
    };
    /**
     * @param {?} items
     * @param {?} destination
     * @return {?}
     */
    SelectService.prototype.setSelectedItemOrChild = function (items, destination) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var itm = items_1[_i];
            if (itm.hasChild) {
                if (itm.id === destination) {
                    itm.selected = true;
                }
                this.setSelectedItemOrChild(itm.children, destination);
            }
            else if (itm.id === destination) {
                itm.selected = true;
            }
        }
    };
    /**
     * @return {?}
     */
    SelectService.prototype.getSelection = function () {
        if (this.Configuration.allowMultiple) {
            return this.getInternalSelection().map(function (v) { return v.data; });
        }
        else {
            var /** @type {?} */ result = this.getInternalSelection();
            if (result && result.length > 0) {
                return result[0].data;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    SelectService.prototype.getInternalSelection = function () {
        var /** @type {?} */ selectedItems = this.getSelectedItems(this._items);
        if (selectedItems && selectedItems.length > 0) {
            var /** @type {?} */ i = 0;
            var /** @type {?} */ max = this._options.maxVisibleItemCount ? this._options.maxVisibleItemCount : 0;
            for (var _i = 0, selectedItems_1 = selectedItems; _i < selectedItems_1.length; _i++) {
                var item = selectedItems_1[_i];
                item.isVisible =
                    // Max not reached or not max value
                    (i < max || max === 0) &&
                        // all my children are unselected
                        (!item.hasChild || item.children.every(function (child) { return child.selected === false; }));
                if (item.isVisible && max > 0) {
                    i++;
                }
            }
        }
        return selectedItems;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SelectService.prototype.toggleItemSelection = function (item) {
        var _this = this;
        if (!this.Configuration.allowMultiple) {
            this.setAllUnselected(this._items);
        }
        item.selected = !item.selected;
        this.setConfiguration(function (opt) { return opt.model = _this.getSelection(); }, false);
        if (this.Configuration.closeOnSelection) {
            this.setConfiguration(function (opt) { return opt.isOpen = false; }, false);
        }
    };
    /**
     * @param {?} items
     * @return {?}
     */
    SelectService.prototype.setAllUnselected = function (items) {
        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
            var itm = items_2[_i];
            if (itm.hasChild) {
                itm.selected = false;
                this.setAllUnselected(itm.children);
            }
            else {
                itm.selected = false;
            }
        }
    };
    /**
     * @param {?} delegate
     * @param {?} processItems
     * @return {?}
     */
    SelectService.prototype.setConfiguration = function (delegate, processItems) {
        var /** @type {?} */ modelBck = this._options.model;
        delegate(this._options);
        if (this._options.isValid()) {
            this.reconfigure(processItems);
        }
        // if model changed, raise event
        if (!processItems &&
            ((modelBck && this._options.model !== modelBck) ||
                (!modelBck && this._options.model))) {
            this.modelChanged$.next(this._options.model);
        }
    };
    Object.defineProperty(SelectService.prototype, "Configuration", {
        /**
         * @return {?}
         */
        get: function () {
            return this._options;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SelectService.prototype.setExpand = function () {
        this.setExpandForList(this._items);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    SelectService.prototype.setExpandForList = function (items) {
        if (!items) {
            return;
        }
        for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
            var item = items_3[_i];
            this.setExpandForList(item.children);
            item.isOpen = (this._options.filterExpandMode === __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__["a" /* ExpandMode */].All);
            if (this._options.filterExpandMode === __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__["a" /* ExpandMode */].Selection) {
                if (item.children) {
                    item.isOpen = item.children.some(function (itm) { return itm.isOpen || itm.selected; });
                }
            }
        }
    };
    /**
     * @param {?} sources
     * @return {?}
     */
    SelectService.prototype.toSelectableItems = function (sources) {
        var _this = this;
        if (sources && Array.isArray(sources)) {
            var /** @type {?} */ i_1 = 1;
            return sources.map(function (srcItem) {
                var /** @type {?} */ item;
                if (srcItem[_this._options.idProperty] &&
                    srcItem[_this._options.idProperty] !== '' &&
                    srcItem[_this._options.textProperty]) {
                    item = new __WEBPACK_IMPORTED_MODULE_1__models_selectable_item__["a" /* SelectableItem */]((srcItem[_this._options.idProperty] || '').toString(), /** @type {?} */ (srcItem[_this._options.textProperty]), srcItem, _this);
                }
                else {
                    item = new __WEBPACK_IMPORTED_MODULE_1__models_selectable_item__["a" /* SelectableItem */](i_1.toString(), /** @type {?} */ (srcItem), srcItem, _this);
                    i_1++;
                }
                if (_this._options.isHierarchy()) {
                    item.children = _this.toSelectableItems(srcItem[_this._options.childProperty]);
                }
                return item;
            });
        }
        return [];
    };
    /**
     * @param {?} array
     * @return {?}
     */
    SelectService.prototype.getSelectedItems = function (array) {
        if (this.Configuration.isValid()) {
            var /** @type {?} */ res = [];
            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                var v = array_1[_i];
                if (v.hasChild && v.selected === true) {
                    if (v.children.every(function (child) { return child.selected === false; })) {
                        res = res.concat([v]);
                    }
                    else {
                        res = res.concat(this.getSelectedItems(v.children));
                    }
                }
                else if (v.hasChild) {
                    res = res.concat(this.getSelectedItems(v.children));
                }
                else if (v.selected === true) {
                    res = res.concat([v]);
                }
            }
            return res;
        }
        else {
            return [];
        }
    };
    /**
     * @param {?} processItems
     * @return {?}
     */
    SelectService.prototype.reconfigure = function (processItems) {
        var _this = this;
        if (this.Configuration.isValid()) {
            this.checkConfig();
            if (processItems) {
                this._items = this.toSelectableItems(this.Configuration.items);
            }
            var /** @type {?} */ model = this.getModel();
            var /** @type {?} */ select_1 = [];
            model.forEach(function (v) {
                select_1 = select_1.concat(_this.getItemForModel(v, _this._items));
            });
            select_1.forEach(function (v) { return v._selected = true; });
        }
    };
    /**
     * @return {?}
     */
    SelectService.prototype.checkConfig = function () {
        if (this.Configuration.allowMultiple && this.Configuration.closeOnSelection) {
            this.Configuration.closeOnSelection = false;
        }
        else if (!this.Configuration.allowMultiple && !this.Configuration.closeOnSelection) {
            this.Configuration.closeOnSelection = true;
        }
    };
    /**
     * @return {?}
     */
    SelectService.prototype.getModel = function () {
        if (!this.Configuration.model) {
            return [];
        }
        else if (!Array.isArray(this.Configuration.model)) {
            return [this.Configuration.model];
        }
        else {
            return this.Configuration.model;
        }
    };
    /**
     * @param {?} value
     * @param {?} array
     * @return {?}
     */
    SelectService.prototype.getItemForModel = function (value, array) {
        var /** @type {?} */ result = [];
        for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
            var v = array_2[_i];
            if (value) {
                if (typeof value !== 'object') {
                    if (v.data === value) {
                        result.push(v);
                    }
                }
                else {
                    if (value[this.Configuration.idProperty]) {
                        if (v.id === (value[this.Configuration.idProperty] || '').toString()) {
                            result.push(v);
                        }
                    }
                    if (this.Configuration.isHierarchy() && v.children && v.children.length > 0) {
                        result = result.concat(this.getItemForModel(value, v.children));
                    }
                }
            }
        }
        return result;
    };
    SelectService.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_3__angular_core__["Injectable"] },
    ];
    /**
     * @nocollapse
     */
    SelectService.ctorParameters = function () { return []; };
    return SelectService;
}());

function SelectService_tsickle_Closure_declarations() {
    /** @type {?} */
    SelectService.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    SelectService.ctorParameters;
    /** @type {?} */
    SelectService.prototype.modelChanged$;
    /** @type {?} */
    SelectService.prototype._items;
    /** @type {?} */
    SelectService.prototype._options;
}
//# sourceMappingURL=select.service.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _root = __window || __global || __self;
exports.root = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();
//# sourceMappingURL=root.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(23);
var isObject_1 = __webpack_require__(24);
var isFunction_1 = __webpack_require__(10);
var tryCatch_1 = __webpack_require__(25);
var errorObject_1 = __webpack_require__(11);
var UnsubscriptionError_1 = __webpack_require__(26);
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
var Symbol = root_1.root.Symbol;
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(10);
var Subscription_1 = __webpack_require__(6);
var Observer_1 = __webpack_require__(12);
var rxSubscriber_1 = __webpack_require__(7);
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer_1.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ItemPipe; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);

var ItemPipe = /** @class */ (function () {
    function ItemPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ItemPipe.prototype.transform = function (value) {
        // ES6 array destructuring
        return value.filter(function (item) { return item.matchFilter; });
    };
    ItemPipe.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'itemPipe' },] },
    ];
    /**
     * @nocollapse
     */
    ItemPipe.ctorParameters = function () { return []; };
    return ItemPipe;
}());

function ItemPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    ItemPipe.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    ItemPipe.ctorParameters;
}
//# sourceMappingURL=item.pipe.js.map

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_14__;

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OffClickDirective; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_common__);


var OffClickDirective = /** @class */ (function () {
    /**
     * @param {?} platformId
     */
    function OffClickDirective(platformId) {
        this.platformId = platformId;
    }
    /**
     * @return {?}
     */
    OffClickDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (Object(__WEBPACK_IMPORTED_MODULE_1__angular_common__["isPlatformBrowser"])(this.platformId)) {
            setTimeout(function () { document.addEventListener('click', _this.offClickHandler); }, 0);
        }
    };
    /**
     * @return {?}
     */
    OffClickDirective.prototype.ngOnDestroy = function () {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__angular_common__["isPlatformBrowser"])(this.platformId)) {
            document.removeEventListener('click', this.offClickHandler);
        }
    };
    OffClickDirective.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{
                    selector: '[off-click]'
                },] },
    ];
    /**
     * @nocollapse
     */
    OffClickDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["PLATFORM_ID"],] },] },
    ]; };
    OffClickDirective.propDecorators = {
        'offClickHandler': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['off-click',] },],
    };
    return OffClickDirective;
}());

function OffClickDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    OffClickDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    OffClickDirective.ctorParameters;
    /** @type {?} */
    OffClickDirective.propDecorators;
    /** @type {?} */
    OffClickDirective.prototype.offClickHandler;
    /** @type {?} */
    OffClickDirective.prototype.platformId;
}
//# sourceMappingURL=off-click.directive.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TreeSelectItemComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_select_service__ = __webpack_require__(4);


var TreeSelectItemComponent = /** @class */ (function () {
    /**
     * @param {?} svc
     */
    function TreeSelectItemComponent(svc) {
        this.svc = svc;
    }
    Object.defineProperty(TreeSelectItemComponent.prototype, "isOpen", {
        /**
         * @return {?}
         */
        get: function () {
            return this.item.isOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeSelectItemComponent.prototype.toggleOpen = function ($event) {
        $event.stopPropagation();
        if (this.haveChildren) {
            this.item.isOpen = !this.item.isOpen;
        }
        else {
            this.select($event);
        }
    };
    Object.defineProperty(TreeSelectItemComponent.prototype, "allowParentSelection", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.allowParentSelection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectItemComponent.prototype, "needCheckBox", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.isHierarchy() && this.svc.Configuration.allowMultiple;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeSelectItemComponent.prototype, "haveChildren", {
        /**
         * @return {?}
         */
        get: function () {
            return this.item && this.item.children && this.item.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeSelectItemComponent.prototype.select = function ($event) {
        $event.stopPropagation();
        if (this.svc.Configuration.allowMultiple ||
            !this.haveChildren ||
            this.svc.Configuration.allowParentSelection) {
            this.svc.toggleItemSelection(this.item);
        }
        this.onTouchedCallBack();
    };
    Object.defineProperty(TreeSelectItemComponent.prototype, "filter", {
        /**
         * @return {?}
         */
        get: function () {
            return this.svc.Configuration.filter;
        },
        enumerable: true,
        configurable: true
    });
    TreeSelectItemComponent.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"], args: [{
                    selector: 'tree-select-item',
                    templateUrl: './tree-select-item.component.html',
                    styleUrls: ['./tree-select-item.component.scss']
                },] },
    ];
    /**
     * @nocollapse
     */
    TreeSelectItemComponent.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_1__services_select_service__["a" /* SelectService */], },
    ]; };
    TreeSelectItemComponent.propDecorators = {
        'onTouchedCallBack': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'item': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
    };
    return TreeSelectItemComponent;
}());

function TreeSelectItemComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    TreeSelectItemComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    TreeSelectItemComponent.ctorParameters;
    /** @type {?} */
    TreeSelectItemComponent.propDecorators;
    /** @type {?} */
    TreeSelectItemComponent.prototype.onTouchedCallBack;
    /** @type {?} */
    TreeSelectItemComponent.prototype.item;
    /** @type {?} */
    TreeSelectItemComponent.prototype.svc;
}
//# sourceMappingURL=tree-select-item.component.js.map

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeSelectDefaultOptions", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TreeSelectComponent", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ItemPipe", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NgxTreeSelectModule", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ExpandMode", function() { return __WEBPACK_IMPORTED_MODULE_0__index__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_tree_select_item_component__ = __webpack_require__(16);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return __WEBPACK_IMPORTED_MODULE_1__components_tree_select_item_component__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_tree_select_component__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return __WEBPACK_IMPORTED_MODULE_2__components_tree_select_component__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__directives_off_click_directive__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return __WEBPACK_IMPORTED_MODULE_3__directives_off_click_directive__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_select_service__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return __WEBPACK_IMPORTED_MODULE_4__services_select_service__["a"]; });
/**
 * Generated bundle index. Do not edit.
 */





//# sourceMappingURL=ngx-tree-select.ng-flat.js.map

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_tree_select_default_options__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_0__models_tree_select_default_options__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_tree_select_component__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__components_tree_select_component__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__pipes_item_pipe__ = __webpack_require__(13);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__pipes_item_pipe__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__module__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__module__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_4__models_expand_mode__["a"]; });





//# sourceMappingURL=index.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(20);
var Subscriber_1 = __webpack_require__(9);
var Subscription_1 = __webpack_require__(6);
var ObjectUnsubscribedError_1 = __webpack_require__(30);
var SubjectSubscription_1 = __webpack_require__(31);
var rxSubscriber_1 = __webpack_require__(7);
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
var toSubscriber_1 = __webpack_require__(22);
var observable_1 = __webpack_require__(27);
var pipe_1 = __webpack_require__(28);
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i - 0] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subscriber_1 = __webpack_require__(9);
var rxSubscriber_1 = __webpack_require__(7);
var Observer_1 = __webpack_require__(12);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var errorObject_1 = __webpack_require__(11);
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root_1.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;
//# sourceMappingURL=observable.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var noop_1 = __webpack_require__(29);
/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i - 0] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;
//# sourceMappingURL=pipe.js.map

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;
//# sourceMappingURL=noop.js.map

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(6);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SelectableItem; });
var SelectableItem = /** @class */ (function () {
    /**
     * @param {?} id
     * @param {?} text
     * @param {?} data
     * @param {?} svc
     */
    function SelectableItem(id, text, data, svc) {
        this.id = id;
        this.text = text;
        this.data = data;
        this.svc = svc;
        this._selected = false;
        this.isOpen = false;
        this.matchFilter = true;
        this.isVisible = false;
    }
    Object.defineProperty(SelectableItem.prototype, "hasChild", {
        /**
         * @return {?}
         */
        get: function () {
            return this.children && this.children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectableItem.prototype, "checked", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.hasChild && this.svc.Configuration.allowMultiple) {
                if (this.children.every(function (child) { return child.selected; })) {
                    return true;
                }
                else if (this.children.every(function (child) { return child.selected === false; })) {
                    return this._selected;
                }
                return null;
            }
            return this._selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectableItem.prototype, "selected", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.hasChild && this.svc.Configuration.allowMultiple) {
                if (this.children.some(function (child) { return child.selected; })) {
                    if (this.svc.Configuration.allowParentSelection) {
                        this._selected = false;
                    }
                    return true;
                }
                else if (this.children.every(function (child) { return child.selected === false; })) {
                    if (this.svc.Configuration.allowParentSelection) {
                        return this._selected;
                    }
                    else {
                        return this._selected = false;
                    }
                }
                return false;
            }
            else if (this.hasChild && this._selected === true) {
                for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                    var itm = _a[_i];
                    itm.selected = false;
                }
            }
            return this._selected;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (this.hasChild && !this.svc.Configuration.allowParentSelection) {
                if (value !== null) {
                    this.children.forEach(function (child) { return child.selected = value; });
                }
            }
            else {
                this._selected = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    return SelectableItem;
}());

function SelectableItem_tsickle_Closure_declarations() {
    /** @type {?} */
    SelectableItem.prototype._selected;
    /** @type {?} */
    SelectableItem.prototype.children;
    /** @type {?} */
    SelectableItem.prototype.isOpen;
    /** @type {?} */
    SelectableItem.prototype.matchFilter;
    /** @type {?} */
    SelectableItem.prototype.isVisible;
    /** @type {?} */
    SelectableItem.prototype.id;
    /** @type {?} */
    SelectableItem.prototype.text;
    /** @type {?} */
    SelectableItem.prototype.data;
    /** @type {?} */
    SelectableItem.prototype.svc;
}
//# sourceMappingURL=selectable-item.js.map

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SelectOption; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__expand_mode__ = __webpack_require__(1);

var SelectOption = /** @class */ (function () {
    function SelectOption() {
        this.idProperty = 'id';
        this.textProperty = 'text';
        this.childProperty = null;
        this.allowMultiple = false;
        this.closeOnSelection = true;
        this.items = [];
        this.isOpen = false;
        this.filter = '';
        this.filterCaseSensitive = false;
        this.allowParentSelection = false;
        this.expandMode = __WEBPACK_IMPORTED_MODULE_0__expand_mode__["a" /* ExpandMode */].None;
    }
    /**
     * @return {?}
     */
    SelectOption.prototype.isHierarchy = function () {
        return this.childProperty && this.childProperty.trim().length > 0;
    };
    Object.defineProperty(SelectOption.prototype, "filterExpandMode", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.filter !== '') {
                return __WEBPACK_IMPORTED_MODULE_0__expand_mode__["a" /* ExpandMode */].All;
            }
            else {
                return this.expandMode;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SelectOption.prototype.displayCheckbox = function () {
        return this.allowMultiple && this.isHierarchy();
    };
    /**
     * @return {?}
     */
    SelectOption.prototype.isValid = function () {
        // Check id property value
        return this.idProperty && this.idProperty.trim().length > 0 &&
            // Check text property value
            this.textProperty && this.textProperty.trim().length > 0 &&
            // Check items value
            this.items && Array.isArray(this.items) && this.items.length > 0;
    };
    return SelectOption;
}());

function SelectOption_tsickle_Closure_declarations() {
    /** @type {?} */
    SelectOption.prototype.idProperty;
    /** @type {?} */
    SelectOption.prototype.textProperty;
    /** @type {?} */
    SelectOption.prototype.childProperty;
    /** @type {?} */
    SelectOption.prototype.allowMultiple;
    /** @type {?} */
    SelectOption.prototype.closeOnSelection;
    /** @type {?} */
    SelectOption.prototype.items;
    /** @type {?} */
    SelectOption.prototype.model;
    /** @type {?} */
    SelectOption.prototype.isOpen;
    /** @type {?} */
    SelectOption.prototype.filter;
    /** @type {?} */
    SelectOption.prototype.filterCaseSensitive;
    /** @type {?} */
    SelectOption.prototype.allowParentSelection;
    /** @type {?} */
    SelectOption.prototype.maxVisibleItemCount;
    /** @type {?} */
    SelectOption.prototype.expandMode;
}
//# sourceMappingURL=select-option.js.map

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NgxTreeSelectModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__angular_common__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__angular_forms__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__pipes_item_pipe__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__angular_core__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__directives_off_click_directive__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_tree_select_component__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__models_tree_select_default_options__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__components_tree_select_item_component__ = __webpack_require__(16);








var NgxTreeSelectModule = /** @class */ (function () {
    function NgxTreeSelectModule() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxTreeSelectModule.forRoot = function (options) {
        return {
            ngModule: NgxTreeSelectModule,
            providers: [
                { provide: __WEBPACK_IMPORTED_MODULE_6__models_tree_select_default_options__["a" /* TreeSelectDefaultOptions */], useValue: options }
            ]
        };
    };
    NgxTreeSelectModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_3__angular_core__["NgModule"], args: [{
                    imports: [
                        __WEBPACK_IMPORTED_MODULE_0__angular_common__["CommonModule"],
                        __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormsModule"]
                    ],
                    declarations: [
                        __WEBPACK_IMPORTED_MODULE_5__components_tree_select_component__["b" /* TreeSelectComponent */],
                        __WEBPACK_IMPORTED_MODULE_7__components_tree_select_item_component__["a" /* TreeSelectItemComponent */],
                        __WEBPACK_IMPORTED_MODULE_4__directives_off_click_directive__["a" /* OffClickDirective */],
                        __WEBPACK_IMPORTED_MODULE_2__pipes_item_pipe__["a" /* ItemPipe */]
                    ],
                    exports: [
                        __WEBPACK_IMPORTED_MODULE_5__components_tree_select_component__["b" /* TreeSelectComponent */]
                    ]
                },] },
    ];
    /**
     * @nocollapse
     */
    NgxTreeSelectModule.ctorParameters = function () { return []; };
    return NgxTreeSelectModule;
}());

function NgxTreeSelectModule_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxTreeSelectModule.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    NgxTreeSelectModule.ctorParameters;
}
//# sourceMappingURL=module.js.map

/***/ })
/******/ ]);
});
//# sourceMappingURL=ngx-tree-select.webpack.umd.js.map